---
// Navigation items based on site map
const navItems = [
  { text: "Home", href: "/" },
  { text: "Branded Products", href: "/branded-products" },
  { text: "Tips & Techniques", href: "/tips-and-techniques" },
  { text: "Contact Us", href: "/contact" },
  { text: "Apply Today", href: "/apply-today" }
];
---

<header class="bg-white shadow-sm border-b border-gray-200" role="banner">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center" aria-label="SatisPie - Go to homepage">
          <span class="text-2xl font-bold text-sp-primary">SatisPie</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex space-x-8" role="navigation" aria-label="Main navigation">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="text-sp-text-primary hover:text-sp-primary px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-sp-primary focus:ring-offset-2"
          >
            {item.text}
          </a>
        ))}
      </nav>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="text-sp-text-primary hover:text-sp-primary inline-flex items-center justify-center p-2 rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-inset focus:ring-sp-primary"
          aria-controls="mobile-menu"
          aria-expanded="false"
          aria-label="Toggle main menu"
          id="mobile-menu-button"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Icon when menu is closed -->
          <svg
            class="block h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
          <!-- Icon when menu is open -->
          <svg
            class="hidden h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="hidden md:hidden" id="mobile-menu" role="navigation" aria-label="Mobile navigation">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200">
      {navItems.map((item) => (
        <a
          href={item.href}
          class="text-sp-text-primary hover:text-sp-primary block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-sp-primary focus:ring-offset-2"
        >
          {item.text}
        </a>
      ))}
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle with improved accessibility
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcons = mobileMenuButton?.querySelectorAll('svg');

  if (mobileMenuButton && mobileMenu && menuIcons) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      // Toggle menu visibility
      mobileMenu.classList.toggle('hidden');
      
      // Update button state
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      
      // Toggle icons
      menuIcons.forEach(icon => icon.classList.toggle('hidden'));
      
      // Focus management for accessibility
      if (!isExpanded) {
        // Menu is opening - focus first menu item
        const firstMenuItem = mobileMenu.querySelector('a');
        if (firstMenuItem) {
          setTimeout(() => firstMenuItem.focus(), 100);
        }
      } else {
        // Menu is closing - return focus to button
        mobileMenuButton.focus();
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!mobileMenuButton?.contains(event.target as Node) && !mobileMenu?.contains(event.target as Node)) {
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          menuIcons.forEach((icon, index) => {
            icon.classList.toggle('hidden', index === 0);
          });
        }
      }
    });
    
    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        menuIcons.forEach((icon, index) => {
          icon.classList.toggle('hidden', index === 0);
        });
        mobileMenuButton.focus();
      }
    });
  }
</script> 
---
import { headerData } from '~/navigation';
import { Icon } from 'astro-icon/components';

const { links, actions } = headerData;
---

<header class="bg-white shadow-md sticky top-0 z-50" role="banner">
  <div class="border-b border-gray-100">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-20">
        <!-- Logo -->
        <div class="flex items-center">
          <a href="/" class="flex items-center space-x-3">
            <img src="/satispie-logo.svg" alt="SatisPie Manufacturing" class="h-12 w-auto" />
            <div class="hidden sm:block">
              <div class="text-xl font-bold text-gray-900">SatisPie</div>
              <div class="text-xs text-gray-600 uppercase tracking-wider">Manufacturing</div>
            </div>
          </a>
        </div>

        <!-- Desktop Navigation -->
        <nav class="hidden lg:flex items-center space-x-1" role="navigation" aria-label="Main navigation">
          {
            links?.map((item) => (
              <div class="relative group">
                {item.links ? (
                  <>
                    <button
                      class="text-gray-700 hover:text-blue-600 px-4 py-2 text-sm font-medium transition-colors duration-200 flex items-center group-hover:text-blue-600"
                      aria-expanded="false"
                    >
                      {item.text}
                      <Icon name="tabler:chevron-down" class="w-4 h-4 ml-1 transition-transform group-hover:rotate-180" />
                    </button>
                    <div class="absolute left-0 mt-2 w-56 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                      <div class="bg-white rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 py-2">
                        {item.links.map((subItem) => (
                          <a
                            href={subItem.href}
                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors"
                          >
                            {subItem.text}
                          </a>
                        ))}
                      </div>
                    </div>
                  </>
                ) : (
                  <a
                    href={item.href}
                    class="text-gray-700 hover:text-blue-600 px-4 py-2 text-sm font-medium transition-colors duration-200"
                  >
                    {item.text}
                  </a>
                )}
              </div>
            ))
          }
          
          <!-- Desktop CTA Button -->
          {actions?.map((action) => (
            <a
              href={action.href}
              class="ml-4 bg-blue-600 text-white px-6 py-2.5 rounded-lg text-sm font-semibold transition-all duration-200 hover:bg-blue-700 hover:shadow-lg"
            >
              {action.text}
            </a>
          ))}
        </nav>

        <!-- Mobile menu button -->
        <div class="lg:hidden">
          <button
            type="button"
            class="text-gray-700 hover:text-blue-600 inline-flex items-center justify-center p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
            aria-controls="mobile-menu"
            aria-expanded="false"
            aria-label="Toggle main menu"
            id="mobile-menu-button"
          >
            <span class="sr-only">Open main menu</span>
            <!-- Icon when menu is closed -->
            <svg
              class="block h-6 w-6"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <!-- Icon when menu is open -->
            <svg
              class="hidden h-6 w-6"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

    </div>
  </div>
  
  <!-- Mobile menu -->
  <div class="hidden lg:hidden" id="mobile-menu" role="navigation" aria-label="Mobile navigation">
    <div class="px-4 pt-2 pb-3 bg-white border-t border-gray-200">
      {
        links?.map((item) => (
          <div class="py-2">
            {item.links ? (
              <>
                <div class="font-semibold text-gray-900 px-3 py-2 text-sm uppercase tracking-wider">
                  {item.text}
                </div>
                <div class="pl-4">
                  {item.links.map((subItem) => (
                    <a
                      href={subItem.href}
                      class="text-gray-700 hover:text-blue-600 block px-3 py-2 text-sm transition-colors duration-200"
                    >
                      {subItem.text}
                    </a>
                  ))}
                </div>
              </>
            ) : (
              <a
                href={item.href}
                class="text-gray-700 hover:text-blue-600 block px-3 py-2 text-sm font-medium transition-colors duration-200"
              >
                {item.text}
              </a>
            )}
          </div>
        ))
      }
      
      <!-- Mobile CTA Button -->
      <div class="pt-4 mt-4 border-t border-gray-200">
        {actions?.map((action) => (
          <a
            href={action.href}
            class="bg-blue-600 text-white block w-full text-center px-6 py-3 rounded-lg text-sm font-semibold transition-colors duration-200 hover:bg-blue-700"
          >
            {action.text}
          </a>
        ))}
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle with improved accessibility
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcons = mobileMenuButton?.querySelectorAll('svg');

  if (mobileMenuButton && mobileMenu && menuIcons) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';

      // Toggle menu visibility
      mobileMenu.classList.toggle('hidden');

      // Update button state
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());

      // Toggle icons
      menuIcons.forEach((icon) => icon.classList.toggle('hidden'));

      // Focus management for accessibility
      if (!isExpanded) {
        // Menu is opening - focus first menu item
        const firstMenuItem = mobileMenu.querySelector('a');
        if (firstMenuItem) {
          setTimeout(() => firstMenuItem.focus(), 100);
        }
      } else {
        // Menu is closing - return focus to button
        mobileMenuButton.focus();
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!mobileMenuButton?.contains(event.target as Node) && !mobileMenu?.contains(event.target as Node)) {
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          menuIcons.forEach((icon, index) => {
            icon.classList.toggle('hidden', index === 0);
          });
        }
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        menuIcons.forEach((icon, index) => {
          icon.classList.toggle('hidden', index === 0);
        });
        mobileMenuButton.focus();
      }
    });
  }
</script>

---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import { getHomePermalink } from '~/utils/permalinks';

export interface Props {
  id?: string;
  isSticky?: boolean;
  isFullWidth?: boolean;
}

const {
  id = 'header',
  isSticky = true,
  isFullWidth = false,
} = Astro.props;

// Simplified navigation structure per Phase 5.1 requirements
const navigationLinks = [
  { text: 'Products', href: '/products' },
  { text: 'Where to Buy', href: '/where-to-buy' },
  { text: 'Tips & Tricks', href: '/tips-and-tricks' },
  { text: 'About', href: '/about' },
  { text: 'Contact', href: '/contact' },
];
---

<header
  class:list={[
    'top-0 z-50 w-full bg-white border-b border-gray-200 transition-all duration-300',
    { 'sticky shadow-lg': isSticky, 'relative': !isSticky },
  ]}
  {...id ? { id } : {}}
>
  <div
    class:list={[
      'mx-auto px-4 sm:px-6 lg:px-8',
      { 'max-w-7xl': !isFullWidth },
    ]}
  >
    <div class="flex justify-between items-center h-16 md:h-20">
        <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={getHomePermalink()} class="flex items-center">
          <Logo />
          </a>
        </div>

        <!-- Desktop Navigation -->
      <nav class="hidden md:flex md:items-center md:space-x-8" aria-label="Main navigation">
        {navigationLinks.map(({ text, href }) => (
          <a
            href={href}
            class="text-gray-700 hover:text-blue-600 px-3 py-2 text-base font-medium transition-colors duration-200"
          >
            {text}
                          </a>
                        ))}
        <a
          href="/careers"
          class="bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded-lg text-base font-medium transition-colors duration-200"
        >
          Apply Today
        </a>
        </nav>

        <!-- Mobile menu button -->
          <button
            type="button"
        class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-blue-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-colors duration-200"
            aria-expanded="false"
        aria-label="Toggle navigation menu"
        data-mobile-menu-toggle
      >
        <Icon name="tabler:menu-2" class="w-6 h-6 block menu-open-icon" />
        <Icon name="tabler:x" class="w-6 h-6 hidden menu-close-icon" />
          </button>
  </div>
  
    <!-- Mobile Navigation Menu -->
    <div
      class="md:hidden hidden mobile-menu-panel"
      data-mobile-menu-panel
    >
      <div class="pt-2 pb-3 space-y-1">
        {navigationLinks.map(({ text, href }) => (
          <a
            href={href}
            class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 transition-colors duration-200"
          >
            {text}
          </a>
        ))}
        <a
          href="/careers"
          class="block mx-3 mt-3 bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded-lg text-base font-medium text-center transition-colors duration-200"
        >
          Apply Today
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle functionality
  function initMobileMenu() {
    const toggleButton = document.querySelector('[data-mobile-menu-toggle]');
    const menuPanel = document.querySelector('[data-mobile-menu-panel]');
    const openIcon = document.querySelector('.menu-open-icon');
    const closeIcon = document.querySelector('.menu-close-icon');

    if (toggleButton && menuPanel && openIcon && closeIcon) {
      let isOpen = false;

      toggleButton.addEventListener('click', () => {
        isOpen = !isOpen;
        
        if (isOpen) {
          menuPanel.classList.remove('hidden');
          openIcon.classList.add('hidden');
          closeIcon.classList.remove('hidden');
          toggleButton.setAttribute('aria-expanded', 'true');
        } else {
          menuPanel.classList.add('hidden');
          openIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
        const target = event.target as HTMLElement;
        if (isOpen && !toggleButton.contains(target) && !menuPanel.contains(target)) {
          isOpen = false;
          menuPanel.classList.add('hidden');
          openIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
        }
      });

      // Close menu on window resize to desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768 && isOpen) {
          isOpen = false;
          menuPanel.classList.add('hidden');
          openIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
      }
    });
  }
  }

  // Initialize on DOM content loaded
  document.addEventListener('DOMContentLoaded', initMobileMenu);
  // Re-initialize on Astro page navigation
  document.addEventListener('astro:after-swap', initMobileMenu);
</script>

<style>
  /* Smooth transitions for mobile menu */
  .mobile-menu-panel {
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Add hover effect to navigation links */
  nav a {
    position: relative;
  }

  nav a::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #2563eb;
    transition: width 0.3s ease;
  }

  nav a:hover::after {
    width: 100%;
  }
</style>